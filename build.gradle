import java.text.MessageFormat

buildscript {
    repositories {
        jcenter()
        maven { url 'http://redshift-maven-repository.s3-website-us-east-1.amazonaws.com/release' }
    }
    dependencies {
        classpath 'mysql:mysql-connector-java:5.1.41'
        classpath 'com.amazon.redshift:redshift-jdbc42-no-awssdk:1.2.8.1005'
    }
}

plugins {
    id 'org.flywaydb.flyway' version '4.2.0'
    id 'com.jfrog.artifactory' version '4.4.18'
}

apply plugin: 'distribution'
apply plugin: 'maven-publish'

group = 'org.opentestsystem.rdw.schema'
version = '1.1.0-SNAPSHOT'

if (project.hasProperty("buildNumber")) {
    project.setVersion(project.version.toString().replaceAll("SNAPSHOT", "${buildNumber}"))
}

// Gradle can't call a single task more than once because of its design, so this creates
// individual tasks for each of the available flyway commands on all of our databases.
// Task names end up like migrateReporting, cleanWarehouse_test, infoReporting_olap.

// Setting up an easy mapping of simple name to task object
def flywayActions = [migrate : org.flywaydb.gradle.task.FlywayMigrateTask,
                     clean   : org.flywaydb.gradle.task.FlywayCleanTask,
                     info    : org.flywaydb.gradle.task.FlywayInfoTask,
                     validate: org.flywaydb.gradle.task.FlywayValidateTask,
                     baseline: org.flywaydb.gradle.task.FlywayBaselineTask,
                     repair  : org.flywaydb.gradle.task.FlywayRepairTask]

// Each config is [name, subdir, db-url, db-schema, db-username, db-password, driver, group]
def configs = []
// Only define mysql/aurora configs if required database properties are set.
// Only define the migrate olap config if the migrate olap schema is set.
// Only define redshift config if the required redshift schema is set.
// The redshift configs don't have separate _test schemas because the schema is explicitly set.
if (hasProperty('database_url') && database_url && hasProperty('database_user') && database_user) {
    configs << ['reporting', 'reporting', database_url, 'reporting', database_user, database_password, 'com.mysql.jdbc.Driver', 'all']
    configs << ['reporting_test', 'reporting', database_url, 'reporting_test', database_user, database_password, 'com.mysql.jdbc.Driver', 'all_test']
    configs << ['warehouse', 'warehouse', database_url, 'warehouse', database_user, database_password, 'com.mysql.jdbc.Driver', 'all']
    configs << ['warehouse_test', 'warehouse', database_url, 'warehouse_test', database_user, database_password, 'com.mysql.jdbc.Driver', 'all_test']
    if (hasProperty('migrate_olap_schema') && migrate_olap_schema) {
        configs << ['migrate_olap', 'migrate_olap', database_url, migrate_olap_schema, database_user, database_password, 'com.mysql.jdbc.Driver', 'olap']
    }
}
if (hasProperty('redshift_url') && redshift_url && hasProperty('redshift_schema') && redshift_schema && hasProperty('redshift_user') && redshift_user) {
    configs << ['reporting_olap', 'reporting_olap', redshift_url, redshift_schema, redshift_user, redshift_password, 'com.amazon.redshift.jdbc42.Driver', 'olap']
}

def groupTasks = [:] // collect map of action+group -> list of tasks
flywayActions.keySet().each { action ->
    configs.each { config ->
        def task = task(action + config[0].capitalize(), type: flywayActions[action]) {
            locations = ['filesystem:' + [rootDir.path, config[1], 'sql'].join('/')]
            url = config[2]
            user = config[4]
            password = config[5]
            driver = config[6]
            schemas = [config[3]]
            placeholders = ['schemaName': config[3]]
            group = 'Schema'
        }
        groupTasks.get(action + config[7], []) << task
        task
    }
}

// create group tasks for clean and migrate
['clean', 'migrate'].each { action ->
    ['all', 'all_test', 'olap'].each { configGroup ->
        def subTasks = groupTasks.get(action + configGroup)
        if (!subTasks || subTasks.size() < 2) return
        task(action + configGroup.capitalize(), dependsOn: subTasks) {
            group = 'SchemaGroup'
            description = MessageFormat.format("Custom group task for: {0}", subTasks.collect() { task -> task.name }.join(', '))
        }
    }
}

//Setup distribution
distributions {
    main {
        contents {
            from('.') {
                include 'reporting/**'
                include 'warehouse/**'
                include 'migrate_olap/**'
                include 'reporting_olap/**'
                include 'legacy_load/**'
                include 'LICENSE'
                include 'build.gradle'
                include 'gradle.properties'
            }
        }
    }
}

//define the artifacts - they come from the distZip
publishing {
    publications {
        schema(MavenPublication) {
            artifact distZip
        }
    }
}

//Install task for installing (publishing) to local .m2
task install(dependsOn: publishToMavenLocal)

//For ci use only
artifactory {
    publish {
        repository {
            repoKey = 'libs-releases-local'
            maven = true

        }
        defaults {
            publications('schema')
        }
    }
    resolve {
        repository {
            repoKey = 'libs-releases'
            maven = true

        }
    }
}
