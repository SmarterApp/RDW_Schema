import java.text.MessageFormat

buildscript {
    repositories {
        jcenter()
        maven { url 'http://redshift-maven-repository.s3-website-us-east-1.amazonaws.com/release' }
    }
    dependencies {
        classpath 'mysql:mysql-connector-java:5.1.41'
        classpath 'com.amazon.redshift:redshift-jdbc42-no-awssdk:1.2.8.1005'
    }
}

plugins {
    id 'org.flywaydb.flyway' version '4.2.0'
    id 'com.jfrog.artifactory' version '4.4.18'
}

apply plugin: 'distribution'
apply plugin: 'maven-publish'

group = 'org.opentestsystem.rdw.schema'
version = '1.3.0-SNAPSHOT'

if (project.hasProperty("buildNumber")) {
    project.setVersion(project.version.toString().replaceAll("SNAPSHOT", "${buildNumber}"))
}

// Gradle can't call a single task more than once because of its design, so this creates
// individual tasks for each of the available flyway commands on all of our databases.
// Task names end up like migrateReporting, cleanWarehouse_test, infoReporting_olap.

// Setting up an easy mapping of simple name to task object
def flywayActions = [migrate : org.flywaydb.gradle.task.FlywayMigrateTask,
                     clean   : org.flywaydb.gradle.task.FlywayCleanTask,
                     info    : org.flywaydb.gradle.task.FlywayInfoTask,
                     validate: org.flywaydb.gradle.task.FlywayValidateTask,
                     baseline: org.flywaydb.gradle.task.FlywayBaselineTask,
                     repair  : org.flywaydb.gradle.task.FlywayRepairTask]

// Each config is [name, subdir, db-url, db-schema, db-username, db-password, driver]
def configs = []
// Only define mysql/aurora configs if required database url/user are set.
// Only define the migrate olap config if the migrate olap schema is set.
// Only define redshift config if the required redshift url/user is set.
if (hasProperty('database_url') && database_url && hasProperty('database_user') && database_user) {
    configs << ['reporting',         'reporting',    database_url, schema_prefix + 'reporting', database_user, database_password, 'com.mysql.jdbc.Driver']
    configs << ['reporting_test',    'reporting',    database_url, schema_prefix + 'reporting_test', database_user, database_password, 'com.mysql.jdbc.Driver']
    configs << ['warehouse',         'warehouse',    database_url, schema_prefix + 'warehouse', database_user, database_password, 'com.mysql.jdbc.Driver']
    configs << ['warehouse_test',    'warehouse',    database_url, schema_prefix + 'warehouse_test', database_user, database_password, 'com.mysql.jdbc.Driver']
    configs << ['migrate_olap',      'migrate_olap', database_url, schema_prefix + 'migrate_olap', database_user, database_password, 'com.mysql.jdbc.Driver']
    configs << ['migrate_olap_test', 'migrate_olap', database_url, schema_prefix + 'migrate_olap_test', database_user, database_password, 'com.mysql.jdbc.Driver']
} else {
    configs << ['reporting', 'database_url, database_user']
    configs << ['reporting_test', 'database_url, database_user']
    configs << ['warehouse', 'database_url, database_user']
    configs << ['warehouse_test', 'database_url, database_user']
    configs << ['migrate_olap', 'database_url, database_user']
    configs << ['migrate_olap_test', 'database_url, database_user']
}
if (hasProperty('redshift_url') && redshift_url && hasProperty('redshift_user') && redshift_user) {
    configs << ['reporting_olap',      'reporting_olap', redshift_url, schema_prefix + 'reporting', redshift_user, redshift_password, 'com.amazon.redshift.jdbc42.Driver']
    configs << ['reporting_olap_test', 'reporting_olap', redshift_url, schema_prefix + 'reporting_test', redshift_user, redshift_password, 'com.amazon.redshift.jdbc42.Driver']
} else {
    configs << ['reporting_olap', 'redshift_url, redshift_user']
    configs << ['reporting_olap_test', 'redshift_url, redshift_user']
}

def groupTasks = [:] // collect map of action+group -> list of tasks
flywayActions.keySet().each { action ->
    configs.each { config ->
        def taskName = action + config[0].capitalize()
        def schemaTask
        if (config.size() == 2) {
            schemaTask = task(taskName) {
                group = 'Schema (disabled)'
                description = MessageFormat.format("Disabled {0} schema task, set properties [{1}] to enable", taskName, config[1])
                doFirst {
                    logger.warn(MessageFormat.format("{0} is disabled because properties [{1}] are not set", taskName, config[1]))
                }
            }
        } else {
            schemaTask = task(taskName, type: flywayActions[action]) {
                locations = ['filesystem:' + [rootDir.path, config[1], 'sql'].join('/')]
                url = config[2]
                schemas = [config[3]]
                user = config[4]
                password = config[5]
                driver = config[6]
                placeholders = ['schemaName': config[3]]
                group = 'Schema'
                description = description + ' (schema: ' + config[3] + ')'
            }
        }
        // Add this task to tasks for 'All' and 'All_test'
        groupTasks.get(action + (taskName.endsWith('_test') ? 'All_test' : 'All'), []) << schemaTask

        schemaTask  // must return task from closure
    }
}

// create group tasks for clean and migrate
['clean', 'migrate'].each { action ->
    ['All', 'All_test'].each { configGroup ->
        def subTasks = groupTasks.get(action + configGroup)
        if (!subTasks || subTasks.size() < 2) return
        task(action + configGroup, dependsOn: subTasks) {
            group = 'SchemaGroup'
            description = MessageFormat.format("Custom group task for: {0}", subTasks.collect() { task -> task.name }.join(', '))
        }
    }
}

//Setup distribution
distributions {
    main {
        contents {
            from('.') {
                include 'reporting/**'
                include 'warehouse/**'
                include 'migrate_olap/**'
                include 'reporting_olap/**'
                include 'legacy_load/**'
                include 'LICENSE'
                include 'build.gradle'
                include 'gradle.properties'
            }
        }
    }
}

//define the artifacts - they come from the distZip
publishing {
    publications {
        schema(MavenPublication) {
            artifact distZip
        }
    }
}

//Install task for installing (publishing) to local .m2
task install(dependsOn: publishToMavenLocal)

//For ci use only
artifactory {
    publish {
        repository {
            repoKey = 'libs-releases-local'
            maven = true

        }
        defaults {
            publications('schema')
        }
    }
    resolve {
        repository {
            repoKey = 'libs-releases'
            maven = true

        }
    }
}
