package org.opentestsystem.rdw.schema;


import org.apache.tomcat.jdbc.pool.DataSource;
import org.apache.tomcat.jdbc.pool.PoolProperties;
import org.flywaydb.core.api.MigrationInfo;
import org.flywaydb.core.api.MigrationState;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.PreparedStatement;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.schema.SchemaMigration.Migration.Warehouse;

public class SchemaMigrationWarehouseTest {

    private String rootJdbcUrl = "jdbc:mysql://localhost:3306";
    private String rootUsername = "root"; //TODO drive from env?
    private String schemaName = "warehouse_it_test";
    private String jdbcUrl = "jdbc:mysql://localhost:3306/" + schemaName + "?useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8";
    private DataSource dataSource;

    //class under test
    private SchemaMigration schemaMigration;

    @Before
    public void setUp() throws Exception {
        runDDL("DROP DATABASE IF EXISTS " + schemaName);
        runDDL("CREATE DATABASE " + schemaName);
        PoolProperties poolProperties = new PoolProperties();
        poolProperties.setUrl(jdbcUrl);
        poolProperties.setUsername(rootUsername);
        dataSource = new DataSource(poolProperties);
        schemaMigration = new SchemaMigration(dataSource, schemaName, Warehouse);
    }

    @After
    public void tearDown() throws Exception {
        dataSource.close();
    }

    @Test
    public void migrate() throws Exception {
        int result = schemaMigration.migrate();
        assertThat(result).isGreaterThan(0);
        //second migration will not change anything
        int result2 = schemaMigration.migrate();
        assertThat(result2).isEqualTo(0);
    }

    @Test
    public void clean() {
        int result = schemaMigration.migrate();
        assertThat(result).isGreaterThan(0);
        schemaMigration.clean();
        MigrationInfo[] info = schemaMigration.info().all();
        assertThat(info.length).isGreaterThan(0);
        assertThat(info[0].getState()).isEqualByComparingTo(MigrationState.PENDING);
    }

    @Test
    public void validate() {
        int result = schemaMigration.migrate();
        assertThat(result).isGreaterThan(0);
        schemaMigration.validate();
        //no exception is valid
    }

    private void runDDL(String sql) {
        DataSource rootDatasource = null;
        try {
            PoolProperties poolProperties = new PoolProperties();
            poolProperties.setUrl(rootJdbcUrl);
            poolProperties.setUsername(rootUsername);
            rootDatasource = new DataSource(poolProperties);
            Connection connection = rootDatasource.getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.execute();
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (rootDatasource != null) {
                rootDatasource.close();
            }
        }
    }

}